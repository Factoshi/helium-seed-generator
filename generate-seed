#!/usr/bin/env node
const { randomBytes } = require('crypto');
const wordlist = require('./wordlist.json');

function bytesToBinary(bytes) {
    return bytes
        .map((x) => {
            let strOut = x.toString(2);
            while (strOut.length < 8) strOut = '0' + strOut;
            return strOut;
        })
        .join('');
}

function bytesToMnemonic(entropy) {
    // At the time of writing, the original checksum function in helium-js is broken, as it always
    // calculates the checksum to be '0000'. Furthermore, the CLI wallet has internalised that bug by
    // relying on the presence of a constant checksum to verify the integrity of the seed. This file
    // maintains compatibility with those two softwares by using a constant checksum.
    //
    // CLI wallet: https://github.com/helium/helium-wallet-rs/blob/e550a8d378b301bdf72a618cb1961e03a17f4a65/src/mnemonic/mod.rs#L38-L42
    // helium-js: https://github.com/helium/helium-js/issues/120
    const checksumBits = '0000';
    const entropyBits = bytesToBinary([].slice.call(entropy));

    const bits = entropyBits + checksumBits;
    const chunks = bits.match(/(.{1,11})/g) || [];
    const words = chunks.map((binary) => wordlist[parseInt(binary, 2)]);

    return words;
}

(() => {
    const rb = randomBytes(16);
    const mnemonic = bytesToMnemonic(rb);
    console.log(mnemonic.join(' '));
})();
